{
  "stats": {
    "suites": 6,
    "tests": 5,
    "passes": 4,
    "pending": 0,
    "failures": 1,
    "start": "2025-06-07T19:57:42.472Z",
    "end": "2025-06-07T19:57:44.025Z",
    "duration": 1553
  },
  "tests": [
    {
      "title": "returns the customerName",
      "fullTitle": "Fix the Scope declare customerName to be bob in global scope returns the customerName",
      "duration": 2,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "modifies the customerName variable",
      "fullTitle": "Fix the Scope upperCaseCustomerName() modifies the customerName variable",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "setBestCustomer",
      "fullTitle": "Fix the Scope setBestCustomer() setBestCustomer",
      "duration": 8,
      "currentRetry": 0,
      "err": {
        "message": "expected { Object (name, email, ...) } to equal undefined",
        "showDiff": true,
        "actual": {
          "name": "bob",
          "email": "bob@example.com",
          "address": "123 Main St, Anytown, USA"
        },
        "stack": "AssertionError: expected { Object (name, email, ...) } to equal undefined\n    at Context.<anonymous> (test/indexTest.js:21:38)\n    at process.processImmediate (node:internal/timers:505:21)"
      }
    },
    {
      "title": "overwrites the best customer",
      "fullTitle": "Fix the Scope overwriteBestCustomer() overwrites the best customer",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "unsuccessfully tries to reassign the least favorite customer",
      "fullTitle": "Fix the Scope changeLeastFavoriteCustomer() unsuccessfully tries to reassign the least favorite customer",
      "duration": 4,
      "currentRetry": 0,
      "err": {}
    }
  ],
  "pending": [],
  "failures": [
    {
      "title": "setBestCustomer",
      "fullTitle": "Fix the Scope setBestCustomer() setBestCustomer",
      "duration": 8,
      "currentRetry": 0,
      "err": {
        "message": "expected { Object (name, email, ...) } to equal undefined",
        "showDiff": true,
        "actual": {
          "name": "bob",
          "email": "bob@example.com",
          "address": "123 Main St, Anytown, USA"
        },
        "stack": "AssertionError: expected { Object (name, email, ...) } to equal undefined\n    at Context.<anonymous> (test/indexTest.js:21:38)\n    at process.processImmediate (node:internal/timers:505:21)"
      }
    }
  ],
  "passes": [
    {
      "title": "returns the customerName",
      "fullTitle": "Fix the Scope declare customerName to be bob in global scope returns the customerName",
      "duration": 2,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "modifies the customerName variable",
      "fullTitle": "Fix the Scope upperCaseCustomerName() modifies the customerName variable",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "overwrites the best customer",
      "fullTitle": "Fix the Scope overwriteBestCustomer() overwrites the best customer",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "unsuccessfully tries to reassign the least favorite customer",
      "fullTitle": "Fix the Scope changeLeastFavoriteCustomer() unsuccessfully tries to reassign the least favorite customer",
      "duration": 4,
      "currentRetry": 0,
      "err": {}
    }
  ]
}